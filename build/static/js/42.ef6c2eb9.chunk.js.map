{"version":3,"sources":["pages/SuccessCareerTest/index.jsx"],"names":["IOSSlider","styled","Slider","theme","color","palette","mode","marginTop","height","padding","fontSize","fontWeight","top","backgroundColor","text","primary","display","CourseTest","React","useState","questionNumber","setQuestionNumber","answer","setAnswer","toggle","setToggle","showTimer","setShowTimer","check1","setCheck1","check2","setCheck2","check3","setCheck3","check4","setCheck4","isTestStarted","setIsTestStarted","testTime","setTestTime","selectedCourseCategory","setSelectedCourseCategory","selectedCourseCategoryValue","setSelectedCourseCategoryValue","history","useHistory","dispatch","useDispatch","detect","useDeviceDetect","useSelector","state","guidanceReducer","isLoading","guidanceCategory","testData","countData","lan","languageReducer","progress","Math","round","total_career_que","t","useTranslation","useEffect","isMobile","toast","error","push","routingConstants","HOME_PAGE","optionA","optionB","optionC","optionD","handleFinishQuestion","data","career_test","id","postAnswer","position","fetchUserCareerTestCount","career_time","parseInt","getGuidanceCategory","value","handleStartCourse","a","fetchStartUserCareerTest","res","status_code","counts","handleAnswerCheck","e","ans","target","loginPage","page","subPage","className","md","xs","sx","m","displayEmpty","onChange","name","input","disabled","renderValue","selected","length","inputProps","map","item","onClick","spacing","direction","count","valueLabelFormat","valueLabelDisplay","renderProgress","src","timeIcon","alt","initialTime","checkpoints","time","callback","endTest","CAREER_TEST_RESULT","Hours","Minutes","Seconds","question","control","checked","label","prev","prev_module","newProgress","user_career_test_count","next_module","handleNextQuestion","Array","keys","i"],"mappings":"ucAqCMA,EAAYC,YAAOC,IAAPD,EAAe,gBAAGE,EAAH,EAAGA,MAAH,MAAgB,CAC/CC,OAAOD,EAAME,QAAQC,KAAkB,WACvCC,UAAW,GACXC,OAAQ,GACRC,QAAS,SAET,0BAA2B,CACzBC,SAAU,GACVC,WAAY,SACZC,KAAM,EACNC,gBAAiB,QACjBT,MAAOD,EAAME,QAAQS,KAAKC,QAC1B,WAAY,CACVC,QAAS,aAkfAC,UA7ef,WACE,MAA4CC,IAAMC,SAAS,GAA3D,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA4BH,IAAMC,WAAlC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BL,IAAMC,UAAS,GAA3C,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCP,IAAMC,UAAS,GAAjD,mBAAOO,EAAP,KAAkBC,EAAlB,KAEA,EAA4BT,IAAMC,UAAS,GAA3C,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA4BX,IAAMC,UAAS,GAA3C,mBAAOW,EAAP,KAAeC,EAAf,KACA,GAA4Bb,IAAMC,UAAS,GAA3C,qBAAOa,GAAP,MAAeC,GAAf,MACA,GAA4Bf,IAAMC,UAAS,GAA3C,qBAAOe,GAAP,MAAeC,GAAf,MACA,GAA0ChB,oBAAS,GAAnD,qBAAOiB,GAAP,MAAsBC,GAAtB,MACA,GAAgClB,mBAAS,MAAzC,qBAAOmB,GAAP,MAAiBC,GAAjB,MACA,GAA4DpB,mBAAS,MAArE,qBAAOqB,GAAP,MAA+BC,GAA/B,MACA,GACEtB,mBAAS,MADX,qBAAOuB,GAAP,MAAoCC,GAApC,MAGMC,GAAUC,cACVC,GAAWC,cACXC,GAASC,cAEf,GAA6DC,aAC3D,SAACC,GAAD,OAAWA,EAAMC,mBADXC,GAAR,GAAQA,UAAWC,GAAnB,GAAmBA,iBAAkBC,GAArC,GAAqCA,SAAUC,GAA/C,GAA+CA,UAIxCC,GAAOP,aAAY,SAAAC,GAAK,OAAIA,EAAMO,mBAAlCD,IAEDE,GAAWC,KAAKC,MAAM,MAAgB,OAATL,SAAS,IAATA,QAAA,EAAAA,GAAWM,mBAAoB,KAAO,EAEjEC,GAAMC,cAAND,EAERE,qBAAU,WACJjB,GAAOkB,WACTC,IAAMC,MAAML,GAAE,mBACdnB,GAAQyB,KAAKC,mBAAiBC,cAE/B,CAAC3B,GAASI,GAAOkB,SAASH,KAE7BE,qBAAU,WACJV,MACU,OAARA,SAAQ,IAARA,QAAA,EAAAA,GAAUjC,WAAV,OAAqBiC,SAArB,IAAqBA,QAArB,EAAqBA,GAAUiB,UACjC3C,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,GACVZ,EAAS,OAACgC,SAAD,IAACA,QAAD,EAACA,GAAUjC,UACH,OAARiC,SAAQ,IAARA,QAAA,EAAAA,GAAUjC,WAAV,OAAqBiC,SAArB,IAAqBA,QAArB,EAAqBA,GAAUkB,UACxC1C,GAAU,GACVF,GAAU,GACVI,IAAU,GACVE,IAAU,GACVZ,EAAS,OAACgC,SAAD,IAACA,QAAD,EAACA,GAAUjC,UACH,OAARiC,SAAQ,IAARA,QAAA,EAAAA,GAAUjC,WAAV,OAAqBiC,SAArB,IAAqBA,QAArB,EAAqBA,GAAUmB,UACxCzC,IAAU,GACVJ,GAAU,GACVE,GAAU,GACVI,IAAU,GACVZ,EAAS,OAACgC,SAAD,IAACA,QAAD,EAACA,GAAUjC,UACH,OAARiC,SAAQ,IAARA,QAAA,EAAAA,GAAUjC,WAAV,OAAqBiC,SAArB,IAAqBA,QAArB,EAAqBA,GAAUoB,UACxCxC,IAAU,GACVN,GAAU,GACVE,GAAU,GACVE,IAAU,GACVV,EAAS,OAACgC,SAAD,IAACA,QAAD,EAACA,GAAUjC,UAEpBO,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,OAGb,CACDoB,GADC,OAEDA,SAFC,IAEDA,QAFC,EAEDA,GAAUjC,OAFT,OAGDiC,SAHC,IAGDA,QAHC,EAGDA,GAAUiB,QAHT,OAIDjB,SAJC,IAIDA,QAJC,EAIDA,GAAUkB,QAJT,OAKDlB,SALC,IAKDA,QALC,EAKDA,GAAUmB,QALT,OAMDnB,SANC,IAMDA,QANC,EAMDA,GAAUoB,QACVvD,IAGF,IAAMwD,GAAuB,WAC3B,IAAMC,EAAO,CACXvD,SACAwD,YAAW,OAAEvB,SAAF,IAAEA,QAAF,EAAEA,GAAUwB,IAErBzD,GACFwB,GAASkC,YAAWH,EAAKjC,GAAN,OAAeF,SAAf,IAAeA,QAAf,EAAeA,GAA6BqC,IAAG,IAElExD,EAAU,KAEV4C,IAAMC,MAAM,kCAAmC,CAC7Ca,SAAU,mBAKhB/D,IAAM+C,WAAU,WACdnB,GACEoC,YAAwB,OAACxC,SAAD,IAACA,QAAD,EAACA,GAA6BqC,GAAInC,OAE3D,CAACE,GAAUtB,EAAQoB,GAAnB,OAA4BF,SAA5B,IAA4BA,QAA5B,EAA4BA,GAA6BqC,KAE5D7D,IAAM+C,WAAU,WACVT,KAAsB,OAATA,SAAS,IAATA,QAAA,EAAAA,GAAW2B,aAAc,IACxC5C,GAAmD,IAAvC6C,SAAQ,OAAC5B,SAAD,IAACA,QAAD,EAACA,GAAW2B,YAAa,KAC7CxD,GAAa,IAEfE,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,KACT,CAACqB,GAAD,OAAYA,SAAZ,IAAYA,QAAZ,EAAYA,GAAW2B,cAE1BlB,qBAAU,WACRnB,GAASuC,iBACR,CAACvC,GAASW,KAEb,IAgFsB6B,GA3EhBC,GAAiB,uCAAG,8BAAAC,EAAA,sEACN1C,GAChB2C,YAAwB,OAAC/C,SAAD,IAACA,QAAD,EAACA,GAA6BqC,GAAInC,KAFpC,UAIC,OAAlB,QAHD8C,EADkB,cAIjB,IAAHA,OAAA,EAAAA,EAAKC,aAJe,gCAKD7C,GACnBoC,YAAwB,OAACxC,SAAD,IAACA,QAAD,EAACA,GAA6BqC,KANlC,OAQK,OAHrBa,EALgB,QAQXD,aAAuBC,EAAOf,KAAKM,cAC5C9C,IAAiB,GACjBE,GAA4D,KAA/C6C,SAAQ,OAACQ,QAAD,IAACA,OAAD,EAACA,EAAQf,KAAKM,YAAa,KAAO,KAVnC,2CAAH,qDAmHjBU,GAAoB,SAACC,EAAEC,GAC3BxE,EAAUwE,GAEa,MAAnBD,EAAEE,OAAOV,OACXzD,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,IACkB,MAAnB2D,EAAEE,OAAOV,OAClBzD,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,IACkB,MAAnB2D,EAAEE,OAAOV,OAClBzD,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,IACkB,MAAnB2D,EAAEE,OAAOV,QAClBzD,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,KAId,OACE,gCACE,cAAC,IAAD,CAAQ8D,WAAW,EAAMC,KAAK,WAAWC,QAAQ,eACjD,eAAC,IAAD,WACE,sBAAKC,UAAU,uBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,6BAAKrC,GAAE,qCACP,eAAC,IAAD,WACE,cAAC,IAAD,CAAKsC,GAAI,EAAGC,GAAI,GAAhB,SACE,cAAC,IAAD,CAAaC,GAAI,CAAEC,EAAG,GAAtB,SACE,cAAC,IAAD,CACEC,cAAY,EACZnB,MAAO9C,GACPkE,SA/JW,SAAC,GAA2B,IAAfpB,EAAc,EAAxBU,OAAUV,MACxC7C,GAAyB,OAAC6C,QAAD,IAACA,OAAD,EAACA,EAAOqB,MACjChE,GAA+B2C,IA8JfsB,MAAO,cAAC,IAAD,IACPC,SAAUzE,GACV0E,YAAa,SAACC,GACZ,OAAyB,KAAb,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUC,QAEV,mCACE,6BAAKjD,GAAE,qCAINgD,GAETE,WAAY,CAAE,aAAc,iBAhB9B,gBAkBG3D,SAlBH,IAkBGA,QAlBH,EAkBGA,GAAkB4D,KAAI,SAACC,GACtB,OACE,cAAC,IAAD,CAAyB7B,MAAO6B,EAAhC,gBACGA,QADH,IACGA,OADH,EACGA,EAAMR,MADT,OAAeQ,QAAf,IAAeA,OAAf,EAAeA,EAAMpC,aAS/B,cAAC,IAAD,CAAKsB,GAAI,EAAGC,GAAI,GAAhB,SACE,wBACEc,QAAS,kBAAM7B,MACfsB,SAAUzE,GAFZ,SAKM2B,GADH3B,GACK,iCACA,4CAMbA,IACC,cAAC,IAAD,CAAKgE,UAAU,kBAAf,SACE,cAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIF,UAAU,YAA/B,SACE,sBAAKA,UAAU,2BAAf,UACE,eAAC,IAAD,CACEA,UAAU,iCACViB,QAAS,EACTC,UAAU,MAHZ,UAKE,6BAAK9E,KACL,wBAAQ4E,QAAS,kBAAMxC,MAAvB,SACGb,GAAE,+CA1GA,WAAgB,IAAfwD,EAAc,uDAAN,EAC9B,OACE,cAACvH,EAAD,CACE,aAAW,aACXoG,YACW,OAAR7C,SAAQ,IAARA,QAAA,EAAAA,GAAUI,WAAY,GAAM,iBACpB,OAARJ,SAAQ,IAARA,QAAA,EAAAA,GAAUI,WAAY,IAAM,sBACpB,OAARJ,SAAQ,IAARA,QAAA,EAAAA,GAAUI,WAAY,KAAO,kBAEhC2B,MAAOiC,EACPC,iBAAkB,SAAClC,GAAD,OAAW,gCAAMA,EAAN,QAC7BmC,kBAAkB,KAClBZ,UAAQ,IAiGGa,CAAc,OAACnE,SAAD,IAACA,QAAD,EAACA,GAAUI,oBAOnCvB,IACC,qCACE,qBAAKgE,UAAU,WAAf,SACE,8BACE,qBAAKuB,IAAKC,IAAUC,IAAI,aAD1B,IACyC9D,GAAE,iBAAmB,IAC3DrC,IAhJO4D,GAgJmBhD,GA9IrC,cAAC,IAAD,CACEwF,YAAaxC,GACbyC,YAAa,CACX,CACEC,KAAM,EACNC,SAAU,kBAlElBnF,GAASoF,YAAO,OAACxF,SAAD,IAACA,QAAD,EAACA,GAA6BqC,KAC9CZ,IAAMC,MAAML,GAAE,uBACdnB,GAAQyB,KAAKC,mBAAiB6D,oBAAjB,OAAsCzF,SAAtC,IAAsCA,QAAtC,EAAsCA,GAA6BqC,QAmE5EuC,UAAU,WARZ,SAUG,kBACC,qCACE,cAAC,IAAMc,MAAP,IADF,KAEE,cAAC,IAAMC,QAAP,IAFF,IAGE,cAAC,IAAMC,QAAP,gBAoIA,eAAC,IAAD,WACE,eAAC,IAAD,CAAKjC,GAAI,EAAGC,GAAI,GAAhB,UACE,sBAAKF,UAAU,UAAf,UACE,6BAAKrC,GAAE,gCACNV,GACC,cAAC,IAAD,IAEA,8BACGjC,EADH,YACqBmC,SADrB,IACqBA,QADrB,EACqBA,GAAUgF,YAGhChF,IACC,eAAC,IAAD,CAAY,aAAW,SAASoD,KAAK,sBAArC,WACW,OAARpD,SAAQ,IAARA,QAAA,EAAAA,GAAUiB,WACRnB,GACC,cAAC,IAAD,IAEA,cAAC,IAAD,CACEiC,MAAM,IACNkD,QACE,cAAC,IAAD,CACEC,QAAS7G,EACT8E,SAAU,SAACZ,GAAD,OAAOD,GAAkBC,EAAE,QAGzC4C,MAAK,OAAEnF,SAAF,IAAEA,QAAF,EAAEA,GAAUiB,YAGd,OAARjB,SAAQ,IAARA,QAAA,EAAAA,GAAUkB,WACRpB,GACC,cAAC,IAAD,IAEA,cAAC,IAAD,CACEiC,MAAM,IACNkD,QACE,cAAC,IAAD,CACEC,QAAS3G,EACT4E,SAAU,SAACZ,GAAD,OAAOD,GAAkBC,EAAE,QAGzC4C,MAAK,OAAEnF,SAAF,IAAEA,QAAF,EAAEA,GAAUkB,YAGd,OAARlB,SAAQ,IAARA,QAAA,EAAAA,GAAUmB,WACRrB,GACC,cAAC,IAAD,IAEA,cAAC,IAAD,CACEiC,MAAM,IACNkD,QACE,cAAC,IAAD,CACEC,QAASzG,GACT0E,SAAU,SAACZ,GAAD,OAAOD,GAAkBC,EAAE,QAGzC4C,MAAK,OAAEnF,SAAF,IAAEA,QAAF,EAAEA,GAAUmB,YAGd,OAARnB,SAAQ,IAARA,QAAA,EAAAA,GAAUoB,WACRtB,GACC,cAAC,IAAD,IAEA,cAAC,IAAD,CACEiC,MAAM,IACNkD,QACE,cAAC,IAAD,CACEC,QAASvG,GACTwE,SAAU,SAACZ,GAAD,OAAOD,GAAkBC,EAAE,QAGzC4C,MAAK,OAAEnF,SAAF,IAAEA,QAAF,EAAEA,GAAUoB,iBAKtB,IACP,qBAAKyB,UAAU,gBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,SACE,wBACEF,UAAU,cACVgB,QAAS,kBA1RzBhG,EAAiB,GAAGC,GAAkB,SAACsH,GAAD,OAAUA,EAAO,UAC3D7F,GACE2C,YAAwB,OACtB/C,SADsB,IACtBA,QADsB,EACtBA,GAA6BqC,GAC7BnC,GAFsB,OAGtBW,SAHsB,IAGtBA,QAHsB,EAGtBA,GAAUqF,YACV,KAqRgB/B,WAAU,OAACtD,SAAD,IAACA,QAAD,EAACA,GAAUqF,aAHvB,SAKG7E,GAAE,8CAIP,cAAC,IAAD,CAAKsC,GAAI,EAAGC,GAAI,EAAGF,UAAU,aAA7B,UACY,OAAT5C,SAAS,IAATA,QAAA,EAAAA,GAAWM,oBAAqB1C,EAC/B,wBACEgF,UAAU,cACVgB,QAAS,kBAAMxC,MAFjB,SAIGb,GAAE,4CAGL,wBACEqC,UAAU,cACVgB,QAAS,kBAjSN,WACzB/F,GAAkB,SAACsH,GAAD,OAAUA,EAAO,KACnC,IAAM9D,EAAO,CACXvD,SACAwD,YAAW,OAAEvB,SAAF,IAAEA,QAAF,EAAEA,GAAUwB,IAEnB8D,IAAwB,OAATrF,SAAS,IAATA,QAAA,EAAAA,GAAWsF,wBAAyB,GAAKnF,GAG1DrC,GACFwB,GAASkC,YAAWH,EAAKjC,GAAN,OAAeF,SAAf,IAAeA,QAAf,EAAeA,GAA6BqC,IAAG,IAClExD,EAAU,KACV,OAAIgC,SAAJ,IAAIA,QAAJ,EAAIA,GAAUjC,QACZwB,GACE2C,YAAwB,OACtB/C,SADsB,IACtBA,QADsB,EACtBA,GAA6BqC,GAC7BnC,GAFsB,OAGtBW,SAHsB,IAGtBA,QAHsB,EAGtBA,GAAUwF,cAIdjG,GACE2C,YAAwB,OACtB/C,SADsB,IACtBA,QADsB,EACtBA,GAA6BqC,GAC7BnC,GAFsB,OAGtBW,SAHsB,IAGtBA,QAHsB,EAGtBA,GAAUwF,YACVF,IAINpH,GAAU,SAACkH,GAAD,OAAWA,MAErBxE,IAAMC,MAAML,GAAE,iBAAkB,CAC9BkB,SAAU,kBAGdpD,GAAU,GACVE,GAAU,GACVE,IAAU,GACVE,IAAU,GA0P2B6G,IAFjB,SAIGjF,GAAE,sDAQf,eAAC,IAAD,CAAKsC,GAAI,EAAGC,GAAI,GAAhB,UACE,sBAAKF,UAAU,aAAf,UACE,6BAAKrC,GAAE,qCACP,qBAAKqC,UAAU,UAAf,SACG,YAAI6C,MAAK,OAACzF,SAAD,IAACA,QAAD,EAACA,GAAWM,kBAAkBoF,QAAQhC,KAAI,SAACiC,GAAD,OAClD,mBACEpE,GACEoE,EAAI,IAAJ,OAAS3F,SAAT,IAASA,QAAT,EAASA,GAAWsF,wBAChB,UACA,WAJR,SAOGK,EAAI,YAKb,qBAAK/C,UAAU,UAAf,SACE,+BACE,+BACE,sBAAMA,UAAU,WAAiB,IAChCrC,GAAE,oCAEL,+BACE,sBAAMqC,UAAU,WAAiB,IAChCrC,GAAE,qDASnB,cAAC,IAAD,CAAQkC,WAAW","file":"static/js/42.ef6c2eb9.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Timer from \"react-compound-timer\";\nimport { routingConstants } from \"../../utils/constants\";\n\nimport {\n  Container,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Skeleton,\n} from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport Stack from \"@mui/material/Stack\";\nimport { styled } from \"@mui/material/styles\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Header, Footer } from \"../../components\";\nimport {\n  getGuidanceCategory,\n  fetchStartUserCareerTest,\n  fetchUserCareerTestCount,\n  postAnswer,\n  endTest,\n} from \"../../store/guidance/action\";\nimport timeIcon from \"../../assets/images/Courses/time.png\";\nimport \"./index.scss\";\nimport \"../CoursesModule/index.scss\";\nimport useDeviceDetect from \"../../hooks/useDeviceDetect\";\n\nconst IOSSlider = styled(Slider)(({ theme }) => ({\n  color: theme.palette.mode === \"dark\" ? \"#3880ff\" : \"#3880ff\",\n  marginTop: 20,\n  height: 10,\n  padding: \"15px 0\",\n\n  \"& .MuiSlider-valueLabel\": {\n    fontSize: 12,\n    fontWeight: \"normal\",\n    top: -6,\n    backgroundColor: \"unset\",\n    color: theme.palette.text.primary,\n    \"&:before\": {\n      display: \"none\",\n    },\n  },\n}));\n\nfunction CourseTest() {\n  const [questionNumber, setQuestionNumber] = React.useState(1);\n  const [answer, setAnswer] = React.useState();\n  const [toggle, setToggle] = React.useState(true);\n  const [showTimer, setShowTimer] = React.useState(false);\n\n  const [check1, setCheck1] = React.useState(false);\n  const [check2, setCheck2] = React.useState(false);\n  const [check3, setCheck3] = React.useState(false);\n  const [check4, setCheck4] = React.useState(false);\n  const [isTestStarted, setIsTestStarted] = useState(false);\n  const [testTime, setTestTime] = useState(null);\n  const [selectedCourseCategory, setSelectedCourseCategory] = useState(null);\n  const [selectedCourseCategoryValue, setSelectedCourseCategoryValue] =\n    useState(null);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const detect = useDeviceDetect();\n  // eslint-disable-next-line no-unused-vars\n  const { isLoading, guidanceCategory, testData, countData } = useSelector(\n    (state) => state.guidanceReducer,\n  );\n\n  const {lan} = useSelector(state => state.languageReducer);\n\n  const progress = Math.round(100 / (countData?.total_career_que || 0)) || 0;\n\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (detect.isMobile) {\n      toast.error(t(\"error.mobile.1\"));\n      history.push(routingConstants.HOME_PAGE);\n    }\n  }, [history, detect.isMobile,t]);\n\n  useEffect(() => {\n    if (testData) {\n      if (testData?.answer === testData?.optionA) {\n        setCheck1(true);\n        setCheck2(false);\n        setCheck3(false);\n        setCheck4(false);\n        setAnswer(testData?.answer);\n      } else if (testData?.answer === testData?.optionB) {\n        setCheck2(true);\n        setCheck1(false);\n        setCheck3(false);\n        setCheck4(false);\n        setAnswer(testData?.answer);\n      } else if (testData?.answer === testData?.optionC) {\n        setCheck3(true);\n        setCheck1(false);\n        setCheck2(false);\n        setCheck4(false);\n        setAnswer(testData?.answer);\n      } else if (testData?.answer === testData?.optionD) {\n        setCheck4(true);\n        setCheck1(false);\n        setCheck2(false);\n        setCheck3(false);\n        setAnswer(testData?.answer);\n      } else {\n        setCheck1(false);\n        setCheck2(false);\n        setCheck3(false);\n        setCheck4(false);\n      }\n    }\n  }, [\n    testData,\n    testData?.answer,\n    testData?.optionA,\n    testData?.optionB,\n    testData?.optionC,\n    testData?.optionD,\n    questionNumber,\n  ]);\n\n  const handleFinishQuestion = () => {\n    const data = {\n      answer,\n      career_test: testData?.id,\n    };\n    if (answer) {\n      dispatch(postAnswer(data,history, selectedCourseCategoryValue?.id,true));\n      // dispatch(endTest(selectedCourseCategoryValue?.id, history));\n      setAnswer(\"\");\n    } else {\n      toast.error(\"Select option for next question\", {\n        position: \"bottom-center\",\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    dispatch(\n      fetchUserCareerTestCount(selectedCourseCategoryValue?.id, history),\n    );\n  }, [dispatch, toggle, history, selectedCourseCategoryValue?.id]);\n\n  React.useEffect(() => {\n    if (countData && countData?.career_time > 0) {\n      setTestTime(parseInt(countData?.career_time, 10) * 60000);\n      setShowTimer(true);\n    }\n    setCheck1(false);\n    setCheck2(false);\n    setCheck3(false);\n    setCheck4(false);\n  }, [countData, countData?.career_time]);\n\n  useEffect(() => {\n    dispatch(getGuidanceCategory());\n  }, [dispatch,lan]);\n\n  const handleCategoryChange = ({ target: { value } }) => {\n    setSelectedCourseCategory(value?.name);\n    setSelectedCourseCategoryValue(value);\n  };\n\n  const handleStartCourse = async () => {\n    const res = await dispatch(\n      fetchStartUserCareerTest(selectedCourseCategoryValue?.id, history),\n    );\n    if (res?.status_code === 200) {\n      const counts = await dispatch(\n        fetchUserCareerTestCount(selectedCourseCategoryValue?.id),\n      );\n      if (counts.status_code === 200 && counts.data.career_time) {\n        setIsTestStarted(true);\n        setTestTime((parseInt(counts?.data.career_time, 10) || 0) * 60000);\n      }\n    }\n  };\n\n  const handleTestFinished = () => {\n    dispatch(endTest(selectedCourseCategoryValue?.id));\n    toast.error(t(\"error.other.2\"));\n    history.push(routingConstants.CAREER_TEST_RESULT + selectedCourseCategoryValue?.id);\n  };\n\n  const handlePrevQuestion = () => {\n    if (questionNumber > 1) setQuestionNumber((prev) => prev - 1);\n    dispatch(\n      fetchStartUserCareerTest(\n        selectedCourseCategoryValue?.id,\n        history,\n        testData?.prev_module,\n        0,\n      ),\n    );\n  };\n\n  const handleNextQuestion = () => {\n    setQuestionNumber((prev) => prev + 1);\n    const data = {\n      answer,\n      career_test: testData?.id,\n    };\n    const newProgress = (countData?.user_career_test_count + 1) * progress;\n\n\n    if (answer) {\n      dispatch(postAnswer(data,history, selectedCourseCategoryValue?.id,false));\n      setAnswer(\"\");\n      if (testData?.answer) {\n        dispatch(\n          fetchStartUserCareerTest(\n            selectedCourseCategoryValue?.id,\n            history,\n            testData?.next_module,\n          ),\n        );\n      } else {\n        dispatch(\n          fetchStartUserCareerTest(\n            selectedCourseCategoryValue?.id,\n            history,\n            testData?.next_module,\n            newProgress,\n          ),\n        );\n      }\n      setToggle((prev) => !prev);\n    } else {\n      toast.error(t(\"error.other.1\"), {\n        position: \"bottom-center\",\n      });\n    }\n    setCheck1(false);\n    setCheck2(false);\n    setCheck3(false);\n    setCheck4(false);\n  };\n\n  const renderTimmer = (value) => {\n    return (\n      <Timer\n        initialTime={value}\n        checkpoints={[\n          {\n            time: 0,\n            callback: () => handleTestFinished(),\n          },\n        ]}\n        direction='backward'\n      >\n        {() => (\n          <>\n            <Timer.Hours /> :\n            <Timer.Minutes />:\n            <Timer.Seconds />\n          </>\n        )}\n      </Timer>\n    );\n  };\n\n  const renderProgress = (count = 0) => {\n    return (\n      <IOSSlider\n        aria-label='ios slider'\n        className={\n          (testData?.progress <= 33 && \"red1-progress\") ||\n          (testData?.progress <= 60 && \"yellow1-progress\") ||\n          (testData?.progress <= 100 && \"green1-progress\")\n        }\n        value={count}\n        valueLabelFormat={(value) => <div>{value}%</div>}\n        valueLabelDisplay='on'\n        disabled\n      />\n    );\n  };\n\n  const handleAnswerCheck = (e,ans) => {\n    setAnswer(ans);\n    // setAnswer(e.target.labels[0].children[1].innerText);\n    if (e.target.value === \"1\") {\n      setCheck1(true);\n      setCheck2(false);\n      setCheck3(false);\n      setCheck4(false);\n    } else if (e.target.value === \"2\") {\n      setCheck1(false);\n      setCheck2(true);\n      setCheck3(false);\n      setCheck4(false);\n    } else if (e.target.value === \"3\") {\n      setCheck1(false);\n      setCheck2(false);\n      setCheck3(true);\n      setCheck4(false);\n    } else if (e.target.value === \"4\") {\n      setCheck1(false);\n      setCheck2(false);\n      setCheck3(false);\n      setCheck4(true);\n    }\n  };\n\n  return (\n    <div>\n      <Header loginPage={true} page='guidance' subPage='careerTest' />\n      <Container>\n        <div className='maindiv_prog setmain'>\n          <div className='select_test'>\n            <h2>{t(\"successCareerTestPage.heading.1\")}</h2>\n            <Row>\n              <Col md={9} xs={12}>\n                <FormControl sx={{ m: 1 }}>\n                  <Select\n                    displayEmpty\n                    value={selectedCourseCategory}\n                    onChange={handleCategoryChange}\n                    input={<OutlinedInput />}\n                    disabled={isTestStarted}\n                    renderValue={(selected) => {\n                      if (selected?.length === 0) {\n                        return (\n                          <>\n                            <em>{t(\"successCareerTestPage.other.1\")}</em>\n                          </>\n                        );\n                      }\n                      return selected;\n                    }}\n                    inputProps={{ \"aria-label\": \"Without label\" }}\n                  >\n                    {guidanceCategory?.map((item) => {\n                      return (\n                        <MenuItem key={item?.id} value={item}>\n                          {item?.name}\n                        </MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n              </Col>\n\n              <Col md={3} xs={12}>\n                <button\n                  onClick={() => handleStartCourse()}\n                  disabled={isTestStarted}\n                >\n                  {isTestStarted\n                    ? t(\"successCareerTestPage.button.1\")\n                    : t(\"successCareerTestPage.button.2\")}\n                </button>\n              </Col>\n            </Row>\n          </div>\n\n          {isTestStarted && (\n            <Row className='pt-md-5 pb-md-5'>\n              <Col md={12} xs={12} className='text-left'>\n                <div className='circular_progress_module'>\n                  <Stack\n                    className='d-flex justify-content-between'\n                    spacing={2}\n                    direction='row'\n                  >\n                    <h3>{selectedCourseCategory}</h3>\n                    <button onClick={() => handleFinishQuestion()}>\n                      {t(\"coursesPage.coursesModulePage.button.2\")}\n                    </button>\n                  </Stack>\n                  {renderProgress(testData?.progress)}\n                </div>\n              </Col>\n            </Row>\n          )}\n        </div>\n\n        {isTestStarted && (\n          <>\n            <div className='time_set'>\n              <p>\n                <img src={timeIcon} alt='timeIcon' /> {t(\"common.time.5\") + \" \"}\n                {showTimer && renderTimmer(testTime)}\n              </p>\n            </div>\n\n            <Row>\n              <Col md={8} xs={12}>\n                <div className='que_box'>\n                  <h2>{t(\"allCertificatePage.other.5\")}</h2>\n                  {isLoading ? (\n                    <Skeleton></Skeleton>\n                  ) : (\n                    <p>\n                      {questionNumber}. {testData?.question}\n                    </p>\n                  )}\n                  {testData && (\n                    <RadioGroup aria-label='gender' name='radio-buttons-group'>\n                      {testData?.optionA &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='1'\n                            control={\n                              <Radio\n                                checked={check1}\n                                onChange={(e) => handleAnswerCheck(e,\"A\")}\n                              />\n                            }\n                            label={testData?.optionA}\n                          />\n                        ))}\n                      {testData?.optionB &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='2'\n                            control={\n                              <Radio\n                                checked={check2}\n                                onChange={(e) => handleAnswerCheck(e,\"B\")}\n                              />\n                            }\n                            label={testData?.optionB}\n                          />\n                        ))}\n                      {testData?.optionC &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='3'\n                            control={\n                              <Radio\n                                checked={check3}\n                                onChange={(e) => handleAnswerCheck(e,\"C\")}\n                              />\n                            }\n                            label={testData?.optionC}\n                          />\n                        ))}\n                      {testData?.optionD &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='4'\n                            control={\n                              <Radio\n                                checked={check4}\n                                onChange={(e) => handleAnswerCheck(e,\"D\")}\n                              />\n                            }\n                            label={testData?.optionD}\n                          />\n                        ))}\n                    </RadioGroup>\n                  )}\n                </div>{\" \"}\n                <div className='prev_next_btn'>\n                  <Row>\n                    <Col md={6} xs={6}>\n                      <button\n                        className='back_button'\n                        onClick={() => handlePrevQuestion()}\n                        disabled={!testData?.prev_module}\n                      >\n                        {t(\"coursesPage.coursesModulePage.button.1\")}\n                      </button>\n                    </Col>\n\n                    <Col md={6} xs={6} className='text-right'>\n                      {countData?.total_career_que === questionNumber ? (\n                        <button\n                          className='next_button'\n                          onClick={() => handleFinishQuestion()}\n                        >\n                          {t(\"coursesPage.coursesModulePage.button.2\")}\n                        </button>\n                      ) : (\n                        <button\n                          className='next_button'\n                          onClick={() => handleNextQuestion()}\n                        >\n                          {t(\"coursesPage.coursesModulePage.button.3\")}\n                        </button>\n                      )}\n                    </Col>\n                  </Row>\n                </div>\n              </Col>\n\n              <Col md={4} xs={12}>\n                <div className='que_status'>\n                  <h2>{t(\"successCareerTestPage.heading.2\")}</h2>\n                  <div className='que_num'>\n                    {[...Array(countData?.total_career_que).keys()].map((i) => (\n                      <p\n                        id={\n                          i + 1 <= countData?.user_career_test_count\n                            ? \"col_gre\"\n                            : \"col_grey\"\n                        }\n                      >\n                        {i + 1}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n                <div className='ans_not'>\n                  <ul>\n                    <li>\n                      <span className='dotte1'></span>{\" \"}\n                      {t(\"successCareerTestPage.other.2\")}\n                    </li>\n                    <li>\n                      <span className='dotte2'></span>{\" \"}\n                      {t(\"successCareerTestPage.other.3\")}\n                    </li>\n                  </ul>\n                </div>\n              </Col>\n            </Row>\n          </>\n        )}\n      </Container>\n      <Footer loginPage={false} />\n    </div>\n  );\n}\n\nexport default CourseTest;\n"],"sourceRoot":""}