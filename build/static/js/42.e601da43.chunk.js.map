{"version":3,"sources":["pages/SuccessCareerTest/index.jsx"],"names":["IOSSlider","styled","Slider","theme","color","palette","mode","marginTop","height","padding","fontSize","fontWeight","top","backgroundColor","text","primary","display","CourseTest","React","useState","questionNumber","setQuestionNumber","answer","setAnswer","toggle","setToggle","showTimer","setShowTimer","check1","setCheck1","check2","setCheck2","check3","setCheck3","check4","setCheck4","isTestStarted","setIsTestStarted","testTime","setTestTime","selectedCourseCategory","setSelectedCourseCategory","selectedCourseCategoryValue","setSelectedCourseCategoryValue","history","useHistory","dispatch","useDispatch","detect","useDeviceDetect","useSelector","state","guidanceReducer","isLoading","guidanceCategory","testData","countData","progress","Math","round","total_career_que","useEffect","isMobile","toast","error","push","optionA","optionB","optionC","optionD","handleFinishQuestion","data","career_test","id","postAnswer","position","fetchUserCareerTestCount","career_time","parseInt","getGuidanceCategory","value","handleStartCourse","a","fetchStartUserCareerTest","res","status_code","counts","handleAnswerCheck","e","target","labels","children","innerText","loginPage","page","subPage","className","md","xs","sx","m","displayEmpty","onChange","name","input","disabled","renderValue","selected","length","inputProps","map","item","onClick","spacing","direction","count","valueLabelFormat","valueLabelDisplay","renderProgress","src","timeIcon","alt","initialTime","checkpoints","time","callback","endTest","Hours","Minutes","Seconds","question","control","checked","label","prev","prev_module","newProgress","user_career_test_count","next_module","handleNextQuestion","Array","keys","i"],"mappings":"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","file":"static/js/42.e601da43.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { toast } from \"react-toastify\";\nimport { useHistory } from \"react-router-dom\";\nimport Timer from \"react-compound-timer\";\n\nimport {\n  Container,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Skeleton,\n} from \"@mui/material\";\nimport Slider from \"@mui/material/Slider\";\nimport Stack from \"@mui/material/Stack\";\nimport { styled } from \"@mui/material/styles\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport Select from \"@mui/material/Select\";\n\nimport { Header, Footer, ScrollToTop } from \"../../components\";\nimport {\n  getGuidanceCategory,\n  fetchStartUserCareerTest,\n  fetchUserCareerTestCount,\n  postAnswer,\n  endTest,\n} from \"../../store/guidance/action\";\nimport timeIcon from \"../../assets/images/Courses/time.png\";\nimport \"./index.scss\";\nimport \"../CoursesModule/index.scss\";\nimport useDeviceDetect from \"../../hooks/useDeviceDetect\";\n\nconst IOSSlider = styled(Slider)(({ theme }) => ({\n  color: theme.palette.mode === \"dark\" ? \"#3880ff\" : \"#3880ff\",\n  marginTop: 20,\n  height: 10,\n  padding: \"15px 0\",\n\n  \"& .MuiSlider-valueLabel\": {\n    fontSize: 12,\n    fontWeight: \"normal\",\n    top: -6,\n    backgroundColor: \"unset\",\n    color: theme.palette.text.primary,\n    \"&:before\": {\n      display: \"none\",\n    },\n  },\n}));\n\nfunction CourseTest() {\n  const [questionNumber, setQuestionNumber] = React.useState(1);\n  const [answer, setAnswer] = React.useState();\n  const [toggle, setToggle] = React.useState(true);\n  const [showTimer, setShowTimer] = React.useState(false);\n\n  const [check1, setCheck1] = React.useState(false);\n  const [check2, setCheck2] = React.useState(false);\n  const [check3, setCheck3] = React.useState(false);\n  const [check4, setCheck4] = React.useState(false);\n  const [isTestStarted, setIsTestStarted] = useState(false);\n  const [testTime, setTestTime] = useState(null);\n  const [selectedCourseCategory, setSelectedCourseCategory] = useState(null);\n  const [selectedCourseCategoryValue, setSelectedCourseCategoryValue] =\n    useState(null);\n\n  const history = useHistory();\n  const dispatch = useDispatch();\n  const detect = useDeviceDetect();\n  // eslint-disable-next-line no-unused-vars\n  const { isLoading, guidanceCategory, testData, countData } = useSelector(\n    (state) => state.guidanceReducer,\n  );\n\n  const progress = Math.round(100 / (countData?.total_career_que || 0)) || 0;\n\n  useEffect(() => {\n    if (detect.isMobile) {\n      toast.error(\"This page is not available in mobile view.\");\n      history.push(\"/\");\n    }\n  }, [history, detect.isMobile]);\n\n  useEffect(() => {\n    if (testData) {\n      if (testData?.answer === testData?.optionA) {\n        setCheck1(true);\n        setCheck2(false);\n        setCheck3(false);\n        setCheck4(false);\n        setAnswer(testData?.answer);\n      } else if (testData?.answer === testData?.optionB) {\n        setCheck2(true);\n        setCheck1(false);\n        setCheck3(false);\n        setCheck4(false);\n        setAnswer(testData?.answer);\n      } else if (testData?.answer === testData?.optionC) {\n        setCheck3(true);\n        setCheck1(false);\n        setCheck2(false);\n        setCheck4(false);\n        setAnswer(testData?.answer);\n      } else if (testData?.answer === testData?.optionD) {\n        setCheck4(true);\n        setCheck1(false);\n        setCheck2(false);\n        setCheck3(false);\n        setAnswer(testData?.answer);\n      } else {\n        setCheck1(false);\n        setCheck2(false);\n        setCheck3(false);\n        setCheck4(false);\n      }\n    }\n  }, [\n    testData,\n    testData?.answer,\n    testData?.optionA,\n    testData?.optionB,\n    testData?.optionC,\n    testData?.optionD,\n    questionNumber,\n  ]);\n\n  const handleFinishQuestion = () => {\n    const data = {\n      answer,\n      career_test: testData?.id,\n    };\n    if (answer) {\n      dispatch(postAnswer(data,history, selectedCourseCategoryValue?.id,true));\n      // dispatch(endTest(selectedCourseCategoryValue?.id, history));\n      setAnswer(\"\");\n      \n    } else {\n      toast.error(\"Select option for next question\", {\n        position: \"bottom-center\",\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    dispatch(\n      fetchUserCareerTestCount(selectedCourseCategoryValue?.id, history),\n    );\n  }, [dispatch, toggle, history, selectedCourseCategoryValue?.id]);\n\n  React.useEffect(() => {\n    if (countData && countData?.career_time > 0) {\n      setTestTime(parseInt(countData?.career_time, 10) * 60000);\n      setShowTimer(true);\n    }\n    setCheck1(false);\n    setCheck2(false);\n    setCheck3(false);\n    setCheck4(false);\n  }, [countData, countData?.career_time]);\n\n  useEffect(() => {\n    dispatch(getGuidanceCategory());\n  }, [dispatch]);\n\n  const handleCategoryChange = ({ target: { value } }) => {\n    setSelectedCourseCategory(value?.name);\n    setSelectedCourseCategoryValue(value);\n  };\n\n  const handleStartCourse = async () => {\n    const res = await dispatch(\n      fetchStartUserCareerTest(selectedCourseCategoryValue?.id, history),\n    );\n    if (res?.status_code === 200) {\n      const counts = await dispatch(\n        fetchUserCareerTestCount(selectedCourseCategoryValue?.id),\n      );\n      if (counts.status_code === 200 && counts.data.career_time) {\n        setIsTestStarted(true);\n        setTestTime((parseInt(counts?.data.career_time, 10) || 0) * 60000);\n      }\n    }\n  };\n\n  const handleTestFinished = () => {\n    dispatch(endTest(selectedCourseCategoryValue?.id));\n    toast.error(\"Test finishes!\");\n    history.push(`/CareerTestResult/${selectedCourseCategoryValue?.id}`);\n  };\n\n  const handlePrevQuestion = () => {\n    if (questionNumber > 1) setQuestionNumber((prev) => prev - 1);\n    dispatch(\n      fetchStartUserCareerTest(\n        selectedCourseCategoryValue?.id,\n        history,\n        testData?.prev_module,\n        0,\n      ),\n    );\n  };\n\n  const handleNextQuestion = () => {\n    setQuestionNumber((prev) => prev + 1);\n    const data = {\n      answer,\n      career_test: testData?.id,\n    };\n    const newProgress = (countData?.user_career_test_count + 1) * progress;\n\n\n    if (answer) {\n      dispatch(postAnswer(data,history, selectedCourseCategoryValue?.id,false));\n      setAnswer(\"\");\n      if (testData?.answer) {\n        dispatch(\n          fetchStartUserCareerTest(\n            selectedCourseCategoryValue?.id,\n            history,\n            testData?.next_module,\n          ),\n        );\n      } else {\n        dispatch(\n          fetchStartUserCareerTest(\n            selectedCourseCategoryValue?.id,\n            history,\n            testData?.next_module,\n            newProgress,\n          ),\n        );\n      }\n      setToggle((prev) => !prev);\n    } else {\n      toast.error(\"Select option for next question\", {\n        position: \"bottom-center\",\n      });\n    }\n    setCheck1(false);\n    setCheck2(false);\n    setCheck3(false);\n    setCheck4(false);\n  };\n\n  const renderTimmer = (value) => {\n    return (\n      <Timer\n        initialTime={value}\n        checkpoints={[\n          {\n            time: 0,\n            callback: () => handleTestFinished(),\n          },\n        ]}\n        direction='backward'\n      >\n        {() => (\n          <>\n            <Timer.Hours /> :\n            <Timer.Minutes />:\n            <Timer.Seconds />\n          </>\n        )}\n      </Timer>\n    );\n  };\n\n  const renderProgress = (count = 0) => {\n    return (\n      <IOSSlider\n        aria-label='ios slider'\n        className={\n          (testData?.progress <= 33 && \"red1-progress\") ||\n          (testData?.progress <= 60 && \"yellow1-progress\") ||\n          (testData?.progress <= 100 && \"green1-progress\")\n        }\n        value={count}\n        valueLabelFormat={(value) => <div>{value}%</div>}\n        valueLabelDisplay='on'\n        disabled\n      />\n    );\n  };\n\n  const handleAnswerCheck = (e) => {\n    setAnswer(e.target.labels[0].children[1].innerText);\n    if (e.target.value === \"1\") {\n      setCheck1(true);\n      setCheck2(false);\n      setCheck3(false);\n      setCheck4(false);\n    } else if (e.target.value === \"2\") {\n      setCheck1(false);\n      setCheck2(true);\n      setCheck3(false);\n      setCheck4(false);\n    } else if (e.target.value === \"3\") {\n      setCheck1(false);\n      setCheck2(false);\n      setCheck3(true);\n      setCheck4(false);\n    } else if (e.target.value === \"4\") {\n      setCheck1(false);\n      setCheck2(false);\n      setCheck3(false);\n      setCheck4(true);\n    }\n  };\n\n  return (\n    <div>\n      <Header loginPage={true} page='guidance' subPage='careerTest' />\n      <Container>\n        <div className='maindiv_prog setmain'>\n          <div className='select_test'>\n            <h2>Select test Categories</h2>\n            <Row>\n              <Col md={9} xs={12}>\n                <FormControl sx={{ m: 1 }}>\n                  <Select\n                    displayEmpty\n                    value={selectedCourseCategory}\n                    onChange={handleCategoryChange}\n                    input={<OutlinedInput />}\n                    disabled={isTestStarted}\n                    renderValue={(selected) => {\n                      if (selected?.length === 0) {\n                        return (\n                          <>\n                            <em>{\"Test Categories\"}</em>\n                          </>\n                        );\n                      }\n                      return selected;\n                    }}\n                    inputProps={{ \"aria-label\": \"Without label\" }}\n                  >\n                    {guidanceCategory?.map((item) => {\n                      return (\n                        <MenuItem key={item?.id} value={item}>\n                          {item?.name}\n                        </MenuItem>\n                      );\n                    })}\n                  </Select>\n                </FormControl>\n              </Col>\n\n              <Col md={3} xs={12}>\n                <button\n                  onClick={() => handleStartCourse()}\n                  disabled={isTestStarted}\n                >\n                  {isTestStarted ? \"Test Started\" : \"Start Test\"}\n                </button>\n              </Col>\n            </Row>\n          </div>\n\n          {isTestStarted && (\n            <Row className='pt-md-5 pb-md-5'>\n              <Col md={12} xs={12} className='text-left'>\n                <div className='circular_progress_module'>\n                  <Stack\n                    className='d-flex justify-content-between'\n                    spacing={2}\n                    direction='row'\n                  >\n                    <h3>{selectedCourseCategory}</h3>\n                    <button onClick={() => handleFinishQuestion()}>\n                      Finish\n                    </button>\n                  </Stack>\n                  {renderProgress(testData?.progress)}\n                </div>\n              </Col>\n            </Row>\n          )}\n        </div>\n\n        {isTestStarted && (\n          <>\n            <div className='time_set'>\n              <p>\n                <img src={timeIcon} alt='timeIcon' /> Time left:{\" \"}\n                {showTimer && renderTimmer(testTime)}\n              </p>\n            </div>\n\n            <Row>\n              <Col md={8} xs={12}>\n                <div className='que_box'>\n                  <h2>Question</h2>\n                  {isLoading ? (\n                    <Skeleton></Skeleton>\n                  ) : (\n                    <p>\n                      {questionNumber}. {testData?.question}\n                    </p>\n                  )}\n                  {testData && (\n                    <RadioGroup aria-label='gender' name='radio-buttons-group'>\n                      {testData?.optionA &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='1'\n                            control={\n                              <Radio\n                                checked={check1}\n                                onChange={handleAnswerCheck}\n                              />\n                            }\n                            label={testData?.optionA}\n                          />\n                        ))}\n                      {testData?.optionB &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='2'\n                            control={\n                              <Radio\n                                checked={check2}\n                                onChange={handleAnswerCheck}\n                              />\n                            }\n                            label={testData?.optionB}\n                          />\n                        ))}\n                      {testData?.optionC &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='3'\n                            control={\n                              <Radio\n                                checked={check3}\n                                onChange={handleAnswerCheck}\n                              />\n                            }\n                            label={testData?.optionC}\n                          />\n                        ))}\n                      {testData?.optionD &&\n                        (isLoading ? (\n                          <Skeleton />\n                        ) : (\n                          <FormControlLabel\n                            value='4'\n                            control={\n                              <Radio\n                                checked={check4}\n                                onChange={handleAnswerCheck}\n                              />\n                            }\n                            label={testData?.optionD}\n                          />\n                        ))}\n                    </RadioGroup>\n                  )}\n                </div>{\" \"}\n                <div className='prev_next_btn'>\n                  <Row>\n                    <Col md={6} xs={6}>\n                      <button\n                        className='back_button'\n                        onClick={() => handlePrevQuestion()}\n                        disabled={!testData?.prev_module}\n                      >\n                        back\n                      </button>\n                    </Col>\n\n                    <Col md={6} xs={6} className='text-right'>\n                      {countData?.total_career_que === questionNumber ? (\n                        <button\n                          className='next_button'\n                          onClick={() => handleFinishQuestion()}\n                        >\n                          finish\n                        </button>\n                      ) : (\n                        <button\n                          className='next_button'\n                          onClick={() => handleNextQuestion()}\n                        >\n                          next\n                        </button>\n                      )}\n                    </Col>\n                  </Row>\n                </div>\n              </Col>\n\n              <Col md={4} xs={12}>\n                <div className='que_status'>\n                  <h2>Questions Status</h2>\n                  <div className='que_num'>\n                    {[...Array(countData?.total_career_que).keys()].map((i) => (\n                      <p\n                        id={\n                          i + 1 <= countData?.user_career_test_count\n                            ? \"col_gre\"\n                            : \"col_grey\"\n                        }\n                      >\n                        {i + 1}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n                <div className='ans_not'>\n                  <ul>\n                    <li>\n                      <span className='dotte1'></span> Answered\n                    </li>\n                    <li>\n                      <span className='dotte2'></span> Not visited\n                    </li>\n                  </ul>\n                </div>\n              </Col>\n            </Row>\n          </>\n        )}\n      </Container>\n      <ScrollToTop />\n      <Footer loginPage={false} />\n    </div>\n  );\n}\n\nexport default CourseTest;\n"],"sourceRoot":""}